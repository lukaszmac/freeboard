{
	"version": 1,
	"allow_edit": true,
	"plugins": [],
	"panes": [
		{
			"width": 1,
			"row": {
				"3": 1,
				"4": 1,
				"5": 1
			},
			"col": {
				"3": 1,
				"4": 1,
				"5": 1
			},
			"col_width": 6,
			"widgets": [
				{
					"type": "mach_d3_plugin",
					"settings": {
						"data": "datasources[\"Measurements\"]",
						"html": "<div id=\"measurements\"><svg width=\"1560\" height=\"900\" viewBox=\"0 0 1000 500\"      preserveAspectRatio=\"xMidYMid meet\"/></div>",
						"code": "// Expected Data:\n// https://lukaszmac.cloudant.com/scratch/_design/measurements/_search/type?q=type%3Ameasurement\nvar data = {\"total_rows\":3,\"offset\":0,\"rows\":[\n{\"id\":\"af560742c206b06290c361ee4775dc6c\",\"key\":\"af560742c206b06290c361ee4775dc6c\",\"value\":\"measurement\",\"doc\":{\"_id\":\"af560742c206b06290c361ee4775dc6c\",\"_rev\":\"1-020ed1254a2bce487ea99570897cac21\",\"type\":\"measurement\",\"dateTime\":\"2015-08-10T13:24:00.000Z\",\"values\":[0.1,0.2,0.3]}},\n{\"id\":\"af560742c206b06290c361ee47d2ff2b\",\"key\":\"af560742c206b06290c361ee47d2ff2b\",\"value\":\"measurement\",\"doc\":{\"_id\":\"af560742c206b06290c361ee47d2ff2b\",\"_rev\":\"2-642323a7a720490feb2fe9c8bd8f02ff\",\"type\":\"measurement\",\"dateTime\":\"2015-08-10T13:25:00.000Z\",\"values\":[0.2,0.2,0.2]}},\n{\"id\":\"f56d91ff577348482e8c6b542dd4c61f\",\"key\":\"f56d91ff577348482e8c6b542dd4c61f\",\"value\":\"measurement\",\"doc\":{\"_id\":\"f56d91ff577348482e8c6b542dd4c61f\",\"_rev\":\"2-740c47eefd5e74d002e8788b380c2e19\",\"type\":\"measurement\",\"dateTime\":\"2015-08-10T13:26:00.000Z\",\"values\":[0.3,0.2,0.1]}}\n]};\n//console.log(data);\n\n// Get the data from the datasource:\nif (datasources[\"Measurements\"]) { data = datasources[\"Measurements\"]; }\n//console.log(data);\n\n// Define date formatting info:\n// https://github.com/mbostock/d3/wiki/Time-Formatting\nvar formatFullDate = d3.time.format.iso; // \"%Y-%m-%dT%H:%M:%S.%LZ\"\nvar parseFullDate = formatFullDate.parse;\nvar formatYMD = d3.time.format(\"%Y-%m-%d\");\nvar parseYMD = formatYMD.parse;\n//format.parse(\"2011-01-01\"); // returns a Date\n\n// Extract each series:\nvar series = [ \n    { name: \"Value 1\", color: \"red\", values: []},\n    { name: \"Value 2\", color: \"green\", values: []},\n    { name: \"Value 3\", color: \"blue\", values: []}\n];\n// Go through each row to extract the data points for each series:\ndata.rows.forEach(function(row, rowIndex)\n             {\n                 // Get the date for the row:\n                 var x = parseFullDate(row.doc.dateTime);\n                 \n                 // Process each value:\n                 row.doc.values.forEach(function(value, seriesIndex)\n                 {\n                     // Get the y value:\n                     var y = value;\n                     \n                     // Create the data point:\n                     var dataPoint = { x: x, y: y};\n                     \n                     // Get the series we must save the data point into:\n                     var ser = series[seriesIndex];\n                     \n                     // Save the data ooint for the series:\n                     ser.values.push(dataPoint);\n                 });\n             });\nconsole.log(series);\n\n// Now we have the data to display.\n\n\n// Use the line chart example from here:\n// http://bl.ocks.org/mbostock/3883245\nvar margin = {top: 20, right: 20, bottom: 30, left: 50},\n    width = 960 - margin.left - margin.right,\n    height = 500 - margin.top - margin.bottom;\n\n\nvar x = d3.time.scale()\n    .range([0, width]);\n\nvar y = d3.scale.linear()\n    .range([height, 0]);\n\nvar xAxis = d3.svg.axis()\n    .scale(x)\n    .orient(\"bottom\");\n\nvar yAxis = d3.svg.axis()\n    .scale(y)\n    .orient(\"left\");\n\nvar line = d3.svg.line()\n    .x(function(d) { return x(d.x); })\n    .y(function(d) { return y(d.y); });\n\n// Remove the old chart:\nd3.select(\"#measurements svg\").remove();\n\n// Create the new chart:\nvar svg = d3.select(\"#measurements\").append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n  .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n// Take the extents from the first series:\nx.domain(d3.extent(series[0].values, function(d) { return d.x; }));\ny.domain(d3.extent(series[0].values, function(d) { return d.y; }));\n\nsvg.append(\"g\")\n.attr(\"class\", \"x axis\")\n.attr(\"transform\", \"translate(0,\" + height + \")\")\n.call(xAxis);\n\nsvg.append(\"g\")\n.attr(\"class\", \"y axis\")\n.call(yAxis)\n.append(\"text\")\n.attr(\"transform\", \"rotate(-90)\")\n.attr(\"y\", 6)\n.attr(\"dy\", \".71em\")\n.style(\"text-anchor\", \"end\")\n.text(\"Value\");\n\nsvg.append(\"path\")\n.datum(series[0].values)\n.attr(\"class\", \"line\")\n.attr(\"d\", line)\n.attr(\n    {\n        style: function(d){return \"stroke-width:2px;stroke:\" + (d.color ? d.color : \"blue\") + \";\";}\n    });\n\n// DATA JOIN\n// Join new data with old elements, if any.\n//var rows = table.selectAll(\"tr.data\")\n//    .data(data.people);\n\n// UPDATE\n// Update old elements as needed.\n//rows.attr(\"class\", \"update\");\n\n// ENTER\n// Create new elements as needed.\n//  rows.enter().append(\"tr\").attr(\"class\",\"data\")\n//  \t.append(\"td\").text(function(d){ return d.Person;});\n\n\n// ENTER + UPDATE\n// Appending to the enter selection expands the update selection to include\n// entering elements; so, operations on the update selection after appending to\n// the enter selection will apply to both entering and updating nodes.\n//rows.text(function(d) { return d; });\n\n// EXIT\n// Remove old elements as needed.\n//rows.exit().remove();\n",
						"sizeInBlocks": 15
					}
				}
			]
		}
	],
	"datasources": [
		{
			"name": "Measurements",
			"type": "JSON",
			"settings": {
				"url": "https://lukaszmac.cloudant.com/scratch/_design/measurements/_view/measurements?include_docs=true",
				"use_thingproxy": true,
				"refresh": 600,
				"method": "GET",
				"headers": [
					{
						"name": "Authorization",
						"value": "Basic dG9uZGVzZXJlbG5ldHdvbmVyeWllZHN0OnIxbFlsRnlhUm1RaXRTb1RENGpxeUVpaw=="
					}
				]
			}
		}
	],
	"columns": 5
}